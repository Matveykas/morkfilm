import express from "express";
import fetch from "node-fetch";
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(cors());
app.use(express.static(__dirname));
app.use(express.json());

const BOT_TOKEN = process.env.BOT_TOKEN || "8101222414:AAFKDBAXW8GDsuD_DBdbXuxs-YXScsAhhk8";
const CHANNEL_USERNAME = "morkfilm";
let newsCache = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –∫–∞–≤—ã—á–µ–∫
function extractTitleFromText(text) {
  if (!text) return "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
  
  const titleMatch = text.match(/¬´([^¬ª]+)¬ª/);
  if (titleMatch && titleMatch[1]) {
    return titleMatch[1];
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–≤—ã—á–µ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5-7 —Å–ª–æ–≤
  const words = text.split(/\s+/);
  if (words.length > 7) {
    return words.slice(0, 7).join(' ') + '...';
  }
  
  return text.length > 70 ? text.substring(0, 70) + '...' : text;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
async function getTelegramFileInfo(fileId) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${fileId}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    if (data.ok) {
      return data.result;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:", error.message);
  }
  return null;
}

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ Telegram
app.get("/api/telegram-file/:file_path(*)", async (req, res) => {
  try {
    const file_path = req.params.file_path;
    const telegramUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file_path}`;
    
    const response = await fetch(telegramUrl);
    if (!response.ok) {
      return res.status(404).send('File not found');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const contentType = response.headers.get('content-type');
    if (contentType) {
      res.setHeader('Content-Type', contentType);
    }
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª
    const buffer = await response.arrayBuffer();
    res.send(Buffer.from(buffer));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ —Ñ–∞–π–ª–∞:", error.message);
    res.status(500).send('Internal Server Error');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
async function getMediaUrl(fileId, isVideo = false) {
  const fileInfo = await getTelegramFileInfo(fileId);
  if (!fileInfo) return null;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
  return `/api/telegram-file/${fileInfo.file_path}`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
async function fetchTelegramNews() {
  try {
    console.log("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram...");
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getUpdates?limit=50`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.ok && data.result && data.result.length > 0) {
      const newPosts = [];
      
      for (const upd of data.result) {
        if (upd.channel_post) {
          const msg = upd.channel_post;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
          if (msg.chat && msg.chat.username === CHANNEL_USERNAME) {
            const text = msg.text || msg.caption || "";
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (!text || text.trim().length < 5) continue;
            
            let mediaUrl = null;
            let mediaType = null;
            let thumbnailUrl = null;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–æ—Ç–∫—É)
            if (msg.photo && msg.photo.length > 0) {
              const fileId = msg.photo[msg.photo.length - 1].file_id;
              mediaUrl = await getMediaUrl(fileId);
              mediaType = 'photo';
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
            else if (msg.video) {
              const fileId = msg.video.file_id;
              mediaUrl = await getMediaUrl(fileId, true);
              mediaType = 'video';
              
              // –î–ª—è –≤–∏–¥–µ–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é
              if (msg.video.thumb) {
                thumbnailUrl = await getMediaUrl(msg.video.thumb.file_id);
              }
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            const title = extractTitleFromText(text);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            let shortText = text;
            if (shortText.length > 120) {
              shortText = shortText.substring(0, 120) + '...';
            }
            
            const newsItem = {
              id: msg.message_id,
              update_id: upd.update_id,
              title: title,
              text: shortText,
              fullText: text,
              date: new Date(msg.date * 1000).toLocaleDateString("ru-RU"),
              timestamp: msg.date * 1000,
              link: `https://t.me/${CHANNEL_USERNAME}/${msg.message_id}`
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (mediaUrl) {
              newsItem.media = {
                url: mediaUrl,
                type: mediaType,
                thumbnail: thumbnailUrl
              };
            }
            
            newPosts.push(newsItem);
          }
        }
      }
      
      if (newPosts.length > 0) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const existingIds = new Set(newsCache.map(n => n.id));
        const uniqueNewPosts = newPosts.filter(post => !existingIds.has(post.id));
        
        if (uniqueNewPosts.length > 0) {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –Ω–∞—á–∞–ª–æ
          newsCache = [...uniqueNewPosts, ...newsCache];
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
          if (newsCache.length > 50) {
            newsCache = newsCache.slice(0, 50);
          }
          
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${uniqueNewPosts.length} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤. –í—Å–µ–≥–æ: ${newsCache.length}`);
        }
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", error.message);
  }
}

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
app.get("/api/telegram-news", (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 50;
    const news = newsCache.slice(0, limit);
    res.json(news);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ API –Ω–æ–≤–æ—Å—Ç–µ–π:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
app.get("/api/refresh-news", async (req, res) => {
  try {
    await fetchTelegramNews();
    res.json({ success: true, count: newsCache.length });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
app.delete("/api/telegram-news/:id", (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const initialLength = newsCache.length;
    
    newsCache = newsCache.filter(news => news.id !== id);
    
    if (newsCache.length < initialLength) {
      res.json({ success: true, message: `–ù–æ–≤–æ—Å—Ç—å ${id} —É–¥–∞–ª–µ–Ω–∞` });
    } else {
      res.status(404).json({ success: false, message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(fetchTelegramNews, 5 * 60 * 1000);

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
setTimeout(fetchTelegramNews, 1000);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get("/", (req, res) => res.sendFile(path.join(__dirname, "index.html")));
app.get("/news", (req, res) => res.sendFile(path.join(__dirname, "news.html")));
app.get("/projects", (req, res) => res.sendFile(path.join(__dirname, "projects.html")));
app.get("/contacts", (req, res) => res.sendFile(path.join(__dirname, "contacts.html")));
app.get("/about", (req, res) => res.sendFile(path.join(__dirname, "about.html")));
app.get("/actors", (req, res) => res.sendFile(path.join(__dirname, "actors.html")));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ Server running http://localhost:${PORT}`));